/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.33.0
 * Product:       sht3x
 * Model-Version: 1.0.0
 */
/*
 * Copyright (c) 2023, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2cSht3x.h"
#include <Arduino.h>

static uint8_t communication_buffer[6] = {0};

SensirionI2cSht3x::SensirionI2cSht3x() {
}

float SensirionI2cSht3x::signalTemperature(uint16_t temperatureTicks) {
    float temperature = 0.0;
    temperature = (float)(temperatureTicks);
    temperature = -45 + ((temperature * 175.0) / 65535.0);
    return temperature;
}

float SensirionI2cSht3x::signalHumidity(uint16_t humidityTicks) {
    float humidity = 0.0;
    humidity = (float)(humidityTicks);
    humidity = (100 * humidity) / 65535.0;
    return humidity;
}

int16_t
SensirionI2cSht3x::measureSingleShot(Repeatability measurementRepeatability,
                                     bool isClockStretching,
                                     float& aTemperature, float& aHumidity) {
    uint16_t rawTemp = 0;
    uint16_t rawHumi = 0;
    int16_t localError = 0;
    if (isClockStretching) {
        if (measurementRepeatability == REPEATABILITY_HIGH) {
            localError = measureSingleShotHighRepeatabilityClockStretching(
                rawTemp, rawHumi);
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
            localError = measureSingleShotMediumRepeatabilityClockStretching(
                rawTemp, rawHumi);
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_LOW) {
            localError = measureSingleShotLowRepeatabilityClockStretching(
                rawTemp, rawHumi);
            if (localError != NO_ERROR) {
                return localError;
            }
        }
    } else if (measurementRepeatability == REPEATABILITY_HIGH) {
        localError = measureSingleShotHighRepeatability(rawTemp, rawHumi);
        if (localError != NO_ERROR) {
            return localError;
        }
    } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
        localError = measureSingleShotMediumRepeatability(rawTemp, rawHumi);
        if (localError != NO_ERROR) {
            return localError;
        }
    } else if (measurementRepeatability == REPEATABILITY_LOW) {
        localError = measureSingleShotLowRepeatability(rawTemp, rawHumi);
        if (localError != NO_ERROR) {
            return localError;
        }
    }
    aTemperature = signalTemperature(rawTemp);
    aHumidity = signalHumidity(rawHumi);
    return localError;
}

int16_t SensirionI2cSht3x::startPeriodicMeasurement(
    Repeatability measurementRepeatability, Mps messagesPerSecond) {
    int16_t localError = 0;
    if (messagesPerSecond == MPS_EVERY_TWO_SECONDS) {
        if (measurementRepeatability == REPEATABILITY_HIGH) {
            localError = startMeasurement05MpsHighRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
            localError = startMeasurement05MpsMediumRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_LOW) {
            localError = startMeasurement05MpsLowRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        }
    } else if (messagesPerSecond == MPS_ONE_PER_SECOND) {
        if (measurementRepeatability == REPEATABILITY_HIGH) {
            localError = startMeasurement1MpsHighRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
            localError = startMeasurement1MpsMediumRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_LOW) {
            localError = startMeasurement1MpsLowRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        }
    } else if (messagesPerSecond == MPS_TWO_PER_SECOND) {
        if (measurementRepeatability == REPEATABILITY_HIGH) {
            localError = startMeasurement2MpsHighRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
            localError = startMeasurement2MpsMediumRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_LOW) {
            localError = startMeasurement2MpsLowRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        }
    } else if (messagesPerSecond == MPS_FOUR_PER_SECOND) {
        if (measurementRepeatability == REPEATABILITY_HIGH) {
            localError = startMeasurement4MpsHighRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
            localError = startMeasurement4MpsMediumRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_LOW) {
            localError = startMeasurement4MpsLowRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        }
    } else if (messagesPerSecond == MPS_TEN_PER_SECOND) {
        if (measurementRepeatability == REPEATABILITY_HIGH) {
            localError = startMeasurement10MpsHighRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_MEDIUM) {
            localError = startMeasurement10MpsMediumRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        } else if (measurementRepeatability == REPEATABILITY_LOW) {
            localError = startMeasurement10MpsLowRepeatability();
            if (localError != NO_ERROR) {
                return localError;
            }
        }
    }
    return localError;
}

int16_t SensirionI2cSht3x::blockingReadMeasurement(float& aTemperature,
                                                   float& aHumidity) {
    uint16_t status = 0u;
    uint16_t dataReadyFlag = 0u;
    uint16_t rawTemp = 0;
    uint16_t rawHumi = 0;
    int16_t localError = 0;
    localError = llreadStatusRegister(status);
    if (localError != NO_ERROR) {
        return localError;
    }
    dataReadyFlag = (status >> 6) & 15;
    while (dataReadyFlag == 0) {
        delay(100);
        localError = llreadStatusRegister(status);
        if (localError != NO_ERROR) {
            return localError;
        }
        dataReadyFlag = (status >> 6) & 15;
    }
    localError = readMeasurement(rawTemp, rawHumi);
    if (localError != NO_ERROR) {
        return localError;
    }
    aTemperature = signalTemperature(rawTemp);
    aHumidity = signalHumidity(rawHumi);
    return localError;
}

int16_t SensirionI2cSht3x::readStatusRegister(uint16_t& aStatusRegister) {
    uint16_t status = 0u;
    int16_t localError = 0;
    localError = llreadStatusRegister(status);
    if (localError != NO_ERROR) {
        return localError;
    }
    aStatusRegister = static_cast<uint16_t>(status);

    return localError;
}

int16_t SensirionI2cSht3x::measureSingleShotHighRepeatability(
    uint16_t& temperatureTicks, uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2400, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t SensirionI2cSht3x::measureSingleShotHighRepeatabilityClockStretching(
    uint16_t& temperatureTicks, uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2c06, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t SensirionI2cSht3x::measureSingleShotMediumRepeatability(
    uint16_t& temperatureTicks, uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x240b, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t SensirionI2cSht3x::measureSingleShotMediumRepeatabilityClockStretching(
    uint16_t& temperatureTicks, uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2c0d, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t
SensirionI2cSht3x::measureSingleShotLowRepeatability(uint16_t& temperatureTicks,
                                                     uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2416, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t SensirionI2cSht3x::measureSingleShotLowRepeatabilityClockStretching(
    uint16_t& temperatureTicks, uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2c10, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement05MpsHighRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2032, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement05MpsMediumRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2024, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement05MpsLowRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x202f, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement1MpsHighRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2130, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement1MpsMediumRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2126, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement1MpsLowRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x212d, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement2MpsHighRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2236, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement2MpsMediumRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2220, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement2MpsLowRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x222b, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement4MpsHighRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2334, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement4MpsMediumRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2322, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement4MpsLowRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2329, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement10MpsHighRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2737, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(16);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement10MpsMediumRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2721, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(7);
    return localError;
}

int16_t SensirionI2cSht3x::startMeasurement10MpsLowRepeatability() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x273a, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(5);
    return localError;
}

int16_t SensirionI2cSht3x::startArtMeasurement() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x2b32, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    return localError;
}

int16_t SensirionI2cSht3x::readMeasurement(uint16_t& temperatureTicks,
                                           uint16_t& humidityTicks) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0xe000, buffer_ptr, 6);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    SensirionI2CRxFrame rxFrame(buffer_ptr, 6);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureTicks);
    localError |= rxFrame.getUInt16(humidityTicks);
    return localError;
}

int16_t SensirionI2cSht3x::stopMeasurement() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3093, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(1);
    return localError;
}

int16_t SensirionI2cSht3x::enableHeater() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x306d, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cSht3x::disableHeater() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3066, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cSht3x::llreadStatusRegister(uint16_t& statusRegister) {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0xf32d, buffer_ptr, 3);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(buffer_ptr, 3);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(statusRegister);
    return localError;
}

int16_t SensirionI2cSht3x::clearStatusRegister() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3041, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cSht3x::softReset() {
    int16_t localError = NO_ERROR;
    uint8_t* buffer_ptr = communication_buffer;
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x30a2, buffer_ptr, 2);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(2);
    return localError;
}

void SensirionI2cSht3x::begin(TwoWire& i2cBus, uint8_t i2cAddress) {
    _i2cBus = &i2cBus;
    _i2cAddress = i2cAddress;
}
